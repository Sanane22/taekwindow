The project and solution files were made in Microsoft Visual Studio 2005.

To build, you need the following in your PATH:
[Visual Studio directory]\VC\bin
[Visual Studio directory]\Common7\IDE

The project files may open in the Express editions of Visual C++ and Visual C#,
but I am not sure of this and have not tested it.

Internals
---------

There are several ways to do what Taekwindow does, among them: hooks and window subclassing.

- WH_CALLWNDPROC and WH_CALLWNDPROCRET can monitor messages but not modify them.
- WH_GETMESSAGE can examine and modify messages, but only those from GetMessage or PeekMessage (i.e. posted messages).
- WH_MOUSE and WH_KEYBOARD can examine and eat messages but not modify them; they run in the thread of the application that receives the message.
- WH_MOUSE_LL and WH_KEYBOARD_LL can examine, modify and eat messages; they run in the thread of the application that installed the hook (!).
- Window subclassing is tricky, but might be the cleanest solution in the end.

We currently use the WH_MOUSE and WH_KEYBOARD_LL hooks. The advantage of WH_KEYBOARD_LL is that it has the power to eat messages that the application should not get. However, keep in mind that it runs in Taekwindow's process, not in the application that is to receive the message!

Subclassing
-----------

We can subclass a window, which essentially wraps the original window procedure with our own. The subclassed window procedure should mangle the messages and return values in such a way that the application thinks we're dragging its title bar or border with the left mouse button.

It is a tricky technique, because you cannot unsubclass safely if somebody else subclassed in the meantime, you shouldn't subclass multiple times, and you should unsubclass before the window is destroyed. On Windows XP there are convenient subclassing controls in ComCtl32.dll, but these are apparently not in Windows 2000, so we should do the dirty work ourselves.

Subclassing is useful if we do it only for a short while: only while the user is dragging a window, that particular window will be subclassed. However, the question arises when to subclass: upon an Alt-down is too early, because we don't know which window is about to be dragged; upon mouse-down is too late, because WM_NCHITTEST has already returned the wrong value to the system by then. In between, right before WM_NCHITTEST arrives, is possible, if we perform the subclassing from a CallWndProc hook. But this hook is expensive: it is called upon each invocation of every window procedure in the system. Perhaps the WH_MOUSE_LL hook is an option, catching the mouse-down before it results in a WM_NCHITTEST -- but because this hook handler runs in a different process, it cannot subclass the window.
